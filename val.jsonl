{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show my balance\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you display my account balance?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to see how much money I have.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: What is my current balance?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you tell me my account balance?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please show me the balance in my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: How much do I have in my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Let me know my balance.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you tell me the amount in my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to check my balance.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show me the current balance in my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my balance\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_balance)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show my balance\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Show my transactions please\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you display my account balance?\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Can you display my recent transactions?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to see how much money I have.\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: I'd like to see my transaction history.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: What is my current balance?\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: What are my latest transactions?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you tell me my account balance?\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Could you show me my recent account activity?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please show me the balance in my account.\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Please show me the transactions on my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: How much do I have in my account?\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: How about my transaction details?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Let me know my balance.\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Let me see my recent transactions.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you tell me the amount in my account?\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Can you tell me about my latest transactions?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my balance.\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: I need to check my transaction history.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me the current balance in my account.\nAI: You still have 4200 in your account.\nAI: Is there anything else you need assistance with?\nUSER: Show me the recent transactions in my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Show my transactions please\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send some money to Tre\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer some funds to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I send money to Tre?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send some cash to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make a payment to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you help me send money to Tre?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to transfer money to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send some money over to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send some funds to Tre.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I transfer some money to Tre?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send Tre some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send some money to Tre\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Tre)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some money to Tre\nAI: How much money do you want to transfer?\nUSER: btw, are these transfers free of charge?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, do these transfers have any fees?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I send money to Tre?\nAI: How much money do you want to transfer?\nUSER: Are there any charges for these transfers, by the way?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some cash to Tre.\nAI: How much money do you want to transfer?\nUSER: Just wondering, are these transfers free?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to Tre.\nAI: How much money do you want to transfer?\nUSER: Are these transfers free, by the way?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, do these transfers cost anything?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer money to Tre.\nAI: How much money do you want to transfer?\nUSER: Are there any fees for these transfers, by the way?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some money over to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, are there any charges for these transfers?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: Do these transfers come with any fees, by the way?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I transfer some money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, are there any costs for these transfers?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send Tre some money.\nAI: How much money do you want to transfer?\nUSER: Just to confirm, are these transfers free of charge?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"btw, are these transfers free of charge?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some money to Tre\nAI: How much money do you want to transfer?\nUSER: btw, are these transfers free of charge?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: great, 50$ then\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, do these transfers have any fees?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Awesome, let's do $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I send money to Tre?\nAI: How much money do you want to transfer?\nUSER: Are there any charges for these transfers, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Perfect, $50 it is.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some cash to Tre.\nAI: How much money do you want to transfer?\nUSER: Just wondering, are these transfers free?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Great, I'll send $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to Tre.\nAI: How much money do you want to transfer?\nUSER: Are these transfers free, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Excellent, $50 then.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, do these transfers cost anything?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Alright, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer money to Tre.\nAI: How much money do you want to transfer?\nUSER: Are there any fees for these transfers, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Cool, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some money over to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, are there any charges for these transfers?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Okay, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: Do these transfers come with any fees, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Fine, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I transfer some money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, are there any costs for these transfers?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Sure, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send Tre some money.\nAI: How much money do you want to transfer?\nUSER: Just to confirm, are these transfers free of charge?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Sounds good, $50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"great, 50$ then\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some money to Tre\nAI: How much money do you want to transfer?\nUSER: btw, are these transfers free of charge?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: great, 50$ then\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, do these transfers have any fees?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Awesome, let's do $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I send money to Tre?\nAI: How much money do you want to transfer?\nUSER: Are there any charges for these transfers, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Perfect, $50 it is.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some cash to Tre.\nAI: How much money do you want to transfer?\nUSER: Just wondering, are these transfers free?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Great, I'll send $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to Tre.\nAI: How much money do you want to transfer?\nUSER: Are these transfers free, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Excellent, $50 then.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, do these transfers cost anything?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Alright, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer money to Tre.\nAI: How much money do you want to transfer?\nUSER: Are there any fees for these transfers, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Cool, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some money over to Tre.\nAI: How much money do you want to transfer?\nUSER: By the way, are there any charges for these transfers?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Okay, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send some funds to Tre.\nAI: How much money do you want to transfer?\nUSER: Do these transfers come with any fees, by the way?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Fine, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I transfer some money to Tre?\nAI: How much money do you want to transfer?\nUSER: BTW, are there any costs for these transfers?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Sure, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send Tre some money.\nAI: How much money do you want to transfer?\nUSER: Just to confirm, are these transfers free of charge?\nAI: Yes, transfers to friends and family using FinX are free of charge. Enjoy fee-free transactions and the convenience of instant transfers.\nAI: How much money do you want to transfer?\nUSER: Sounds good, $50.\nAI: Would you like to transfer 50 to Tre?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Tre, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's birdie@example.com\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use birdie@example.com as my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me via birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The address is birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at birdie@example.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: birdie@example.com is my email address.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's birdie@example.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, birdie@example.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's birdie@example.com\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use birdie@example.com as my email.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me via birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: birdie@example.com is my email address.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's birdie@example.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: sorry, I need to correct the previous input\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use birdie@example.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me via birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_card: add a card to your account\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: birdie@example.com is my email address.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"sorry, I need to correct the previous input\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, None)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's birdie@example.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: sorry, I need to correct the previous input\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use birdie@example.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me via birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: birdie@example.com is my email address.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's birdie@example.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: sorry, I need to correct the previous input\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use birdie@example.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me via birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The address is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct my previous response, sorry.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: I need to correct the previous entry, my apologies.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at birdie@example.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: Apologies, I need to amend my last response.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: birdie@example.com is my email address.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: My apologies, I need to change the previous answer.\nAI: Would you like to update your location to California?\nUSER: /SetSlots(confirm_slot_correction=true)\nAI: Sure, I'll update your location to California.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is birdie@example.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: birdie@example.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send money\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to transfer some funds.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I send some money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to make a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to move some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you help me send money?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send cash.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to initiate a money transfer.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I transfer money to someone?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to send some money.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make a payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money\nAI: Who do you want to transfer money to?\nUSER: ah, one moment stop that. I want to see my transfers first\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some funds.\nAI: Who do you want to transfer money to?\nUSER: Wait a second, cancel that. I need to check my transfers first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I send some money?\nAI: Who do you want to transfer money to?\nUSER: Just a moment, cancel that. I need to see my previous transfers.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer.\nAI: Who do you want to transfer money to?\nUSER: One moment, stop. I need to view my transfer history first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to move some money.\nAI: Who do you want to transfer money to?\nUSER: Wait, cancel that. I want to see my past transfers first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send money?\nAI: Who do you want to transfer money to?\nUSER: Hold on, stop that. I need to check my transfer records first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send cash.\nAI: Who do you want to transfer money to?\nUSER: Ah, wait, cancel. I want to see my transfer details first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to initiate a money transfer.\nAI: Who do you want to transfer money to?\nUSER: Just a sec, stop that. I need to review my transfers first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I transfer money to someone?\nAI: Who do you want to transfer money to?\nUSER: One moment, cancel that. I want to see my transfer history first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to send some money.\nAI: Who do you want to transfer money to?\nUSER: Wait a second, cancel that. I need to check my transfers first.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment.\nAI: Who do you want to transfer money to?\nUSER: Just a moment, cancel that. I need to see my previous transfers.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_recipient\" (the name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: undefined, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ah, one moment stop that. I want to see my transfers first\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()\nStartFlow(transaction_search)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money\nAI: Who do you want to transfer money to?\nUSER: ah, one moment stop that. I want to see my transfers first\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: okay, send money to Jill\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to transfer some funds.\nAI: Who do you want to transfer money to?\nUSER: Wait a second, cancel that. I need to check my transfers first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Alright, transfer money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I send some money?\nAI: Who do you want to transfer money to?\nUSER: Just a moment, cancel that. I need to see my previous transfers.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Sure, send funds to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to make a money transfer.\nAI: Who do you want to transfer money to?\nUSER: One moment, stop. I need to view my transfer history first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Okay, I want to send money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to move some money.\nAI: Who do you want to transfer money to?\nUSER: Wait, cancel that. I want to see my past transfers first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Fine, transfer cash to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you help me send money?\nAI: Who do you want to transfer money to?\nUSER: Hold on, stop that. I need to check my transfer records first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Alright, I need to send money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send cash.\nAI: Who do you want to transfer money to?\nUSER: Ah, wait, cancel. I want to see my transfer details first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Okay, please send money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to initiate a money transfer.\nAI: Who do you want to transfer money to?\nUSER: Just a sec, stop that. I need to review my transfers first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Sure, I want to transfer money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I transfer money to someone?\nAI: Who do you want to transfer money to?\nUSER: One moment, cancel that. I want to see my transfer history first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Okay, initiate a transfer to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to send some money.\nAI: Who do you want to transfer money to?\nUSER: Wait a second, cancel that. I need to check my transfers first.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Alright, send some money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ntransaction_search: lists the last transactions of the user account\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment.\nAI: Who do you want to transfer money to?\nUSER: Just a moment, cancel that. I need to see my previous transfers.\nAI: Sure, I'll pause the money transfer for now.\nAI: Your current transactions are:  30$ from self to Joe at 2023-06-16T11:59:30.000000 700$ from self to Mary at 2023-06-10T10:30:21.000000 50$ from Joe to self at 2023-05-01T16:10:10.000000\nAI: Is there anything else you need assistance with?\nUSER: Okay, I need to transfer money to Jill.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay, send money to Jill\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Jill)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: credit card\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll pay with my credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Using a credit card, please.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'd like to use my credit card for payment.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Charge it to my credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll use a credit card to pay.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Payment will be made via credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll settle the bill with a credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: My payment method is a credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll cover the cost with a credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll be paying by credit card.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"credit card\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, card)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: credit card\nAI: Please provide your card number.\nUSER: 1234 5678 9012 3456\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll pay with my credit card.\nAI: Please provide your card number.\nUSER: My card number is 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Using a credit card, please.\nAI: Please provide your card number.\nUSER: Here is my card number: 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'd like to use my credit card for payment.\nAI: Please provide your card number.\nUSER: The number on my card is 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Charge it to my credit card.\nAI: Please provide your card number.\nUSER: Please use this card number: 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll use a credit card to pay.\nAI: Please provide your card number.\nUSER: 1234 5678 9012 3456 is my card number.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Payment will be made via credit card.\nAI: Please provide your card number.\nUSER: You can charge to 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll settle the bill with a credit card.\nAI: Please provide your card number.\nUSER: The credit card number is 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: My payment method is a credit card.\nAI: Please provide your card number.\nUSER: My payment card number is 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll cover the cost with a credit card.\nAI: Please provide your card number.\nUSER: Use 1234 5678 9012 3456 for the payment.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 2 please\nAI: What is the delivery address?\nUSER: 30 Pine Road\nAI: You have put in a order for 2.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll be paying by credit card.\nAI: Please provide your card number.\nUSER: The card details are 1234 5678 9012 3456.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"card_details\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 2.0, type: float, description: None\n- name: address, value: 30 Pine Road, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: card, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234 5678 9012 3456\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(card_details, 1234 5678 9012 3456)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send money to Joe\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer funds to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please send money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send some cash to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me send money to Joe?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make a payment to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to send money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you transfer money to Joe for me?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I intend to send money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to wire money to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send money over to Joe.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send money to Joe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Joe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please send money to Joe.\nAI: How much money do you want to transfer?\nUSER: My mistake, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send money to Joe?\nAI: How much money do you want to transfer?\nUSER: Apologies, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to Joe.\nAI: How much money do you want to transfer?\nUSER: Correction, I meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to send money to Joe.\nAI: How much money do you want to transfer?\nUSER: Oh, I actually meant John.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you transfer money to Joe for me?\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant John instead.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to send money to Joe.\nAI: How much money do you want to transfer?\nUSER: I meant John, not Joe.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to wire money to Joe.\nAI: How much money do you want to transfer?\nUSER: Oh, I meant John, not Joe.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send money over to Joe.\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant John, not Joe.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Joe, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"oh sorry I meant John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send money to Joe\nAI: How much money do you want to transfer?\nUSER: oh sorry I meant John\nAI: Would you like to change the recipient for the money transfer?\nUSER: never mind, cancel the transfer\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer funds to Joe.\nAI: How much money do you want to transfer?\nUSER: Oops, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Forget it, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please send money to Joe.\nAI: How much money do you want to transfer?\nUSER: My mistake, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Please cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send some cash to Joe.\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant to say John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Never mind, just cancel it.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send money to Joe?\nAI: How much money do you want to transfer?\nUSER: Apologies, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Cancel the transfer, please.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make a payment to Joe.\nAI: How much money do you want to transfer?\nUSER: Correction, I meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: On second thought, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to send money to Joe.\nAI: How much money do you want to transfer?\nUSER: Oh, I actually meant John.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Cancel the transfer, thanks.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you transfer money to Joe for me?\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant John instead.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Actually, cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I intend to send money to Joe.\nAI: How much money do you want to transfer?\nUSER: I meant John, not Joe.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Just cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to wire money to Joe.\nAI: How much money do you want to transfer?\nUSER: Oh, I meant John, not Joe.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Never mind, cancel it.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send money over to Joe.\nAI: How much money do you want to transfer?\nUSER: Sorry, I meant John, not Joe.\nAI: Would you like to change the recipient for the money transfer?\nUSER: Please go ahead and cancel the transfer.\n\n===\n\nYou are currently in the flow \"pattern_correction\".\nYou have just asked the user for the slot \"confirm_slot_correction\" (boolean value set when the user affirms or denies the correction).\n\n\nHere are the slots of the currently active flow:\n- name: confirm_slot_correction, value: undefined, type: bool, description: boolean value set when the user affirms or denies the correction, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"never mind, cancel the transfer\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "CancelFlow()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please show my contacts\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you display my contacts?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show me the list of my contacts.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you bring up my contacts?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to see my contacts, please.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: May I see my contact list?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Display my contacts for me.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Let me see my contacts.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you pull up my contacts?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please bring up my contact list.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you show me who I have in my contacts?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Please show my contacts\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(list_contacts)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please show my contacts\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you display my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me the list of my contacts.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you bring up my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to see my contacts, please.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I see my contact list?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Display my contacts for me.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Let me see my contacts.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please bring up my contact list.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you show me who I have in my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_handle\" (a contact handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: undefined, type: text, description: a contact handle starting with @\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"@MaryLu\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_handle, @MaryLu)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please show my contacts\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you display my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me the list of my contacts.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you bring up my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to see my contacts, please.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I see my contact list?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Display my contacts for me.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Let me see my contacts.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please bring up my contact list.\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    slot: remove_contact_confirmation\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you show me who I have in my contacts?\nAI: You currently have the following contacts:  - Joe (@JoeMyers)  - Mary (@MaryLu)  \nAI: Is there anything else you need assistance with?\nUSER: Remove contact @MaryLu\nAI: What's the handle of the user you want to remove?\nUSER: @MaryLu\nAI: Should I remove @MaryLu from your contact list?\nUSER: yes\n\n===\n\nYou are currently in the flow \"remove_contact\".\nYou have just asked the user for the slot \"remove_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: remove_contact_handle, value: @MaryLu, type: text, description: a contact handle starting with @\n- name: remove_contact_confirmation, value: undefined, type: text, description: None\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(remove_contact_confirmation, yes)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I would like to confirm my account\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to verify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me confirm my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to make sure my account is confirmed.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you assist me in confirming my account?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please help me verify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need assistance with account confirmation.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to confirm my account details.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you confirm my account for me?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I would like to ensure my account is verified.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to verify my account.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I would like to confirm my account\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(verify_account)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to confirm my account\nAI: What's your email address?\nUSER: gos@hawk.com\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: My email is gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me confirm my account?\nAI: What's your email address?\nUSER: The email address is gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make sure my account is confirmed.\nAI: What's your email address?\nUSER: You can reach me at gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you assist me in confirming my account?\nAI: What's your email address?\nUSER: It's gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please help me verify my account.\nAI: What's your email address?\nUSER: My email address is gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need assistance with account confirmation.\nAI: What's your email address?\nUSER: Contact me at gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to confirm my account details.\nAI: What's your email address?\nUSER: gos@hawk.com is my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you confirm my account for me?\nAI: What's your email address?\nUSER: I use gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to ensure my account is verified.\nAI: What's your email address?\nUSER: gos@hawk.com is the email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: Please note my email: gos@hawk.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"gos@hawk.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, gos@hawk.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to confirm my account\nAI: What's your email address?\nUSER: gos@hawk.com\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: My email is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me confirm my account?\nAI: What's your email address?\nUSER: The email address is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make sure my account is confirmed.\nAI: What's your email address?\nUSER: You can reach me at gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you assist me in confirming my account?\nAI: What's your email address?\nUSER: It's gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please help me verify my account.\nAI: What's your email address?\nUSER: My email address is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need assistance with account confirmation.\nAI: What's your email address?\nUSER: Contact me at gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to confirm my account details.\nAI: What's your email address?\nUSER: gos@hawk.com is my email.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you confirm my account for me?\nAI: What's your email address?\nUSER: I use gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to ensure my account is verified.\nAI: What's your email address?\nUSER: gos@hawk.com is the email.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: Please note my email: gos@hawk.com.\nAI: Are you based in California?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to confirm my account\nAI: What's your email address?\nUSER: gos@hawk.com\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: My email is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me confirm my account?\nAI: What's your email address?\nUSER: The email address is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to make sure my account is confirmed.\nAI: What's your email address?\nUSER: You can reach me at gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you assist me in confirming my account?\nAI: What's your email address?\nUSER: It's gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please help me verify my account.\nAI: What's your email address?\nUSER: My email address is gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need assistance with account confirmation.\nAI: What's your email address?\nUSER: Contact me at gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to confirm my account details.\nAI: What's your email address?\nUSER: gos@hawk.com is my email.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you confirm my account for me?\nAI: What's your email address?\nUSER: I use gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to ensure my account is verified.\nAI: What's your email address?\nUSER: gos@hawk.com is the email.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to verify my account.\nAI: What's your email address?\nUSER: Please note my email: gos@hawk.com.\nAI: Are you based in California?\nUSER: no\nAI: Your email address is gos@hawk.com and you are not based in California, correct?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: gos@hawk.com, type: text, description: None\n- name: based_in_california, value: False, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: loyalty points\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll use my loyalty points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'd like to pay with my points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Can I use my reward points for this?\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll be paying with loyalty points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Please charge it to my points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I want to use my membership points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll redeem my points for this order.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Let\u2019s go with loyalty points for payment.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I prefer to use my points.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Use my loyalty points for the payment.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"payment_option\".\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: undefined, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loyalty points\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(payment_option, membership_points)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: loyalty points\nAI: Please enter your user name.\nUSER: janedoe\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll use my loyalty points.\nAI: Please enter your user name.\nUSER: My username is janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'd like to pay with my points.\nAI: Please enter your user name.\nUSER: Enter janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Can I use my reward points for this?\nAI: Please enter your user name.\nUSER: Use janedoe as the username.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll be paying with loyalty points.\nAI: Please enter your user name.\nUSER: The username is janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Please charge it to my points.\nAI: Please enter your user name.\nUSER: Log in with janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I want to use my membership points.\nAI: Please enter your user name.\nUSER: Type in janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll redeem my points for this order.\nAI: Please enter your user name.\nUSER: janedoe is my user name.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Let\u2019s go with loyalty points for payment.\nAI: Please enter your user name.\nUSER: Input janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I prefer to use my points.\nAI: Please enter your user name.\nUSER: Please use janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Use my loyalty points for the payment.\nAI: Please enter your user name.\nUSER: It's janedoe.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"janedoe\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, janedoe)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: loyalty points\nAI: Please enter your user name.\nUSER: janedoe\nAI: Please enter your password.\nUSER: r@nd0m\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll use my loyalty points.\nAI: Please enter your user name.\nUSER: My username is janedoe.\nAI: Please enter your password.\nUSER: My password is r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'd like to pay with my points.\nAI: Please enter your user name.\nUSER: Enter janedoe.\nAI: Please enter your password.\nUSER: Enter r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Can I use my reward points for this?\nAI: Please enter your user name.\nUSER: Use janedoe as the username.\nAI: Please enter your password.\nUSER: Use r@nd0m as the password.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll be paying with loyalty points.\nAI: Please enter your user name.\nUSER: The username is janedoe.\nAI: Please enter your password.\nUSER: The password is r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Please charge it to my points.\nAI: Please enter your user name.\nUSER: Log in with janedoe.\nAI: Please enter your password.\nUSER: Log in with r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I want to use my membership points.\nAI: Please enter your user name.\nUSER: Type in janedoe.\nAI: Please enter your password.\nUSER: Type in r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I'll redeem my points for this order.\nAI: Please enter your user name.\nUSER: janedoe is my user name.\nAI: Please enter your password.\nUSER: r@nd0m is my password.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Let\u2019s go with loyalty points for payment.\nAI: Please enter your user name.\nUSER: Input janedoe.\nAI: Please enter your password.\nUSER: Input r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: I prefer to use my points.\nAI: Please enter your user name.\nUSER: Please use janedoe.\nAI: Please enter your password.\nUSER: Please use r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: confirmation_order, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I would like to order a diavola pizza.\nAI: How many pizzas would you like to order?\nUSER: 1 please\nAI: What is the delivery address?\nUSER: 40 Elm Street\nAI: You have put in a order for 1.0 diavola pizzas. Please confirm the details above are correct?\nUSER: /SetSlots(confirmation_order=True)\nAI: How would you like to pay for your order?\nUSER: Use my loyalty points for the payment.\nAI: Please enter your user name.\nUSER: It's janedoe.\nAI: Please enter your password.\nUSER: It's r@nd0m.\n\n===\n\nYou are currently in the flow \"order_pizza\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: pizza, value: diavola, type: text, description: None\n- name: num_pizza, value: 1.0, type: float, description: None\n- name: address, value: 40 Elm Street, type: text, description: None\n- name: confirmation_order, value: True, type: bool, description: None, allowed values: [True, False]\n- name: payment_option, value: membership_points, type: categorical, description: None, allowed values: ['card', 'membership_points']\n- name: card_details, value: undefined, type: text, description: None\n- name: user_name, value: janedoe, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"r@nd0m\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, r@nd0m)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send 40 bucks to Ty\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you send 40 dollars to Ty for me?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please send 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send 40 dollars to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you transfer 40 bucks to Ty?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to send $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me send 40 dollars to Ty?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to transfer 40 bucks to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to send $40 to Ty.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you send $40 to Ty for me?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to send 40 bucks to Ty\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, Ty)\nSetSlot(transfer_money_amount_of_money, 40)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send 40 bucks to Ty\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you send 40 dollars to Ty for me?\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please send 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send 40 dollars to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you transfer 40 bucks to Ty?\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to send $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send 40 dollars to Ty?\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to transfer 40 bucks to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to send $40 to Ty.\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you send $40 to Ty for me?\nAI: Would you like to transfer 40 to Ty?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: Ty, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 40, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: send money to John\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Transfer funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to send some money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you send money to John for me?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please transfer money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to send cash to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you send money to John?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to transfer money to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Send some money to John, please.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you help me send money to John?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to transfer some funds to John.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"send money to John\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(transfer_money)\nSetSlot(transfer_money_recipient, John)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: send money to John\nAI: How much money do you want to transfer?\nUSER: ask me something else\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Transfer funds to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to send some money to John.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you send money to John for me?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send cash to John.\nAI: How much money do you want to transfer?\nUSER: Please ask me something else.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you send money to John?\nAI: How much money do you want to transfer?\nUSER: Let's move on to another question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send some money to John, please.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send money to John?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"ask me something else\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SkipQuestion()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: send money to John\nAI: How much money do you want to transfer?\nUSER: ask me something else\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: okay 50\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Transfer funds to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Alright, 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to send some money to John.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Sure, 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you send money to John for me?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 is fine.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Let's go with 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send cash to John.\nAI: How much money do you want to transfer?\nUSER: Please ask me something else.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 works for me.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you send money to John?\nAI: How much money do you want to transfer?\nUSER: Let's move on to another question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Okay, let's do 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 it is.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send some money to John, please.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: I'm good with 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send money to John?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Yes, 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Fine, 50.\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_amount_of_money\" (the amount of money without any currency designation).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: undefined, type: text, description: the amount of money without any currency designation\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"okay 50\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_amount_of_money, 50)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: send money to John\nAI: How much money do you want to transfer?\nUSER: ask me something else\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: okay 50\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Transfer funds to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Alright, 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to send some money to John.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Sure, 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you send money to John for me?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 is fine.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Let's go with 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to send cash to John.\nAI: How much money do you want to transfer?\nUSER: Please ask me something else.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 works for me.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you send money to John?\nAI: How much money do you want to transfer?\nUSER: Let's move on to another question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Okay, let's do 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to transfer money to John.\nAI: How much money do you want to transfer?\nUSER: Can you ask me a different question?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: 50 it is.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Send some money to John, please.\nAI: How much money do you want to transfer?\nUSER: Could you ask me something different?\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: I'm good with 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you help me send money to John?\nAI: How much money do you want to transfer?\nUSER: I'd prefer a different question.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Yes, 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    slot: transfer_money_final_confirmation (accepts True or False)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to transfer some funds to John.\nAI: How much money do you want to transfer?\nUSER: Ask me another question, please.\nAI: Sure, I understand you'd like to change the topic. Let me know what you'd like to talk about instead.\nAI: How much money do you want to transfer?\nUSER: Fine, 50.\nAI: Would you like to transfer 50 to John?\nUSER: yes\n\n===\n\nYou are currently in the flow \"transfer_money\".\nYou have just asked the user for the slot \"transfer_money_final_confirmation\" (accepts True or False).\n\n\nHere are the slots of the currently active flow:\n- name: transfer_money_recipient, value: John, type: text, description: the name of a person\n- name: transfer_money_amount_of_money, value: 50, type: text, description: the amount of money without any currency designation\n- name: transfer_money_final_confirmation, value: undefined, type: text, description: accepts True or False\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(transfer_money_final_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's mag@pie.com\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use mag@pie.com as my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me at mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: mag@pie.com is my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at mag@pie.com.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I am using mag@pie.com for my email.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_email\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: undefined, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"It's mag@pie.com\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_email, mag@pie.com)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's mag@pie.com\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use mag@pie.com as my email.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: mag@pie.com is my email.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I am using mag@pie.com for my email.\nAI: Are you based in California?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"based_in_california\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(based_in_california, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's mag@pie.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use mag@pie.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: mag@pie.com is my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I am using mag@pie.com for my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's mag@pie.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: Actually my income is not that high\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: In fact, my income doesn't exceed that figure.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My earnings are not that high, actually.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: To clarify, my income is less than that.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use mag@pie.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My yearly income is actually lower.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: I don't make that much, actually.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: mag@pie.com is my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My income doesn't reach that level.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: Actually, my income is under that threshold.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My annual income is not that high.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: I earn less than that, actually.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I am using mag@pie.com for my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: In fact, my income doesn't exceed that figure.\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Actually my income is not that high\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: It's mag@pie.com\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: Actually my income is not that high\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email address is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: In fact, my income doesn't exceed that figure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can reach me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My earnings are not that high, actually.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: The email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: To clarify, my income is less than that.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I use mag@pie.com as my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My yearly income is actually lower.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: Contact me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: I don't make that much, actually.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: mag@pie.com is my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My income doesn't reach that level.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I receive emails at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: Actually, my income is under that threshold.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: My email is mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: My annual income is not that high.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: You can email me at mag@pie.com.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: I earn less than that, actually.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: verify_account_email\n    slot: based_in_california, allowed values: [True, False]\n    slot: verify_account_sufficient_california_income, allowed values: [True, False]\n    slot: verify_account_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nregister_to_vote_in_california: To enable a california resident to register to vote.\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to verify my account\nAI: What's your email address?\nUSER: I am using mag@pie.com for my email.\nAI: Are you based in California?\nUSER: yes\nAI: Does your yearly income exceed 100,000 USD?\nUSER: yes\nAI: Your email address is mag@pie.com and you are based in California with a yearly income exceeding 100,000$, correct?\nUSER: In fact, my income doesn't exceed that figure.\nAI: Does your yearly income exceed 100,000 USD?\nUSER: no\n\n===\n\nYou are currently in the flow \"verify_account\".\nYou have just asked the user for the slot \"verify_account_sufficient_california_income\".\n\n\nHere are the slots of the currently active flow:\n- name: verify_account_email, value: mag@pie.com, type: text, description: None\n- name: based_in_california, value: True, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_sufficient_california_income, value: undefined, type: bool, description: None, allowed values: [True, False]\n- name: verify_account_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"no\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(verify_account_sufficient_california_income, False)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to set up a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to establish a new standing order.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I arrange a new standing order payment?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to create a new standing order.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you help me set up a new standing order payment?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to initiate a new standing order.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need assistance with setting up a new standing order.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I would like to start a new standing order payment.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_card: add a card to your account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_balance: check the user's account balance\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nlist_contacts: show your contact list\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you assist me in creating a new standing order?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to set up a new standing order payment.\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(setup_recurrent_payment)\nSetSlot(recurrent_payment_type, standing order)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to check my portfolio\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I'd like to view my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can I see my portfolio, please?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Show me my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: May I access my portfolio?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I need to check my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Could you display my portfolio?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Please let me check my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I want to look at my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: Can you pull up my portfolio?\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\n\nUSER: I wish to review my portfolio.\n\n===\n\nYou are currently not in any flow and so there are no active slots.\nThis means you can only set a slot if you first start a flow that requires that slot.\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"I want to check my portfolio\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "StartFlow(check_portfolio)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to check my portfolio\nAI: Please enter your user name.\nUSER: Max\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to view my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I see my portfolio, please?\nAI: Please enter your user name.\nUSER: It's Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me my portfolio.\nAI: Please enter your user name.\nUSER: I'm Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I access my portfolio?\nAI: Please enter your user name.\nUSER: Call me Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my portfolio.\nAI: Please enter your user name.\nUSER: The name's Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you display my portfolio?\nAI: Please enter your user name.\nUSER: Max is my name.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please let me check my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to look at my portfolio.\nAI: Please enter your user name.\nUSER: It's Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my portfolio?\nAI: Please enter your user name.\nUSER: I'm Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to review my portfolio.\nAI: Please enter your user name.\nUSER: Call me Max.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_name\" (The user name of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: undefined, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Max\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_name, Max)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to check my portfolio\nAI: Please enter your user name.\nUSER: Max\nAI: Please enter your password.\nUSER: 1234\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to view my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: My password is 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I see my portfolio, please?\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234 is my password.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me my portfolio.\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Entering 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I access my portfolio?\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: The password is 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my portfolio.\nAI: Please enter your user name.\nUSER: The name's Max.\nAI: Please enter your password.\nUSER: 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you display my portfolio?\nAI: Please enter your user name.\nUSER: Max is my name.\nAI: Please enter your password.\nUSER: It's 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please let me check my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: Use 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to look at my portfolio.\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234, that's my password.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my portfolio?\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Keying in 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nlist_contacts: show your contact list\n    \ncheck_balance: check the user's account balance\n    \nadd_card: add a card to your account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to review my portfolio.\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: My password is 1234.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"user_password\" (The password of the user.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: undefined, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"1234\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(user_password, 1234)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to check my portfolio\nAI: Please enter your user name.\nUSER: Max\nAI: Please enter your password.\nUSER: 1234\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: loan\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to view my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I said loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I see my portfolio, please?\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234 is my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me my portfolio.\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Entering 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Still choosing loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I access my portfolio?\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: The password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: My selection is loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my portfolio.\nAI: Please enter your user name.\nUSER: The name's Max.\nAI: Please enter your password.\nUSER: 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, once more.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you display my portfolio?\nAI: Please enter your user name.\nUSER: Max is my name.\nAI: Please enter your password.\nUSER: It's 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I choose loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please let me check my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: Use 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, please.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to look at my portfolio.\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234, that's my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan is my choice.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my portfolio?\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Keying in 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I pick loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to review my portfolio.\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, for sure.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to check my portfolio\nAI: Please enter your user name.\nUSER: Max\nAI: Please enter your password.\nUSER: 1234\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: loan\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: loan\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to view my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I said loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I said loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I see my portfolio, please?\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234 is my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me my portfolio.\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Entering 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Still choosing loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Still choosing loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I access my portfolio?\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: The password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: My selection is loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: My selection is loan.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my portfolio.\nAI: Please enter your user name.\nUSER: The name's Max.\nAI: Please enter your password.\nUSER: 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, once more.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, once more.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you display my portfolio?\nAI: Please enter your user name.\nUSER: Max is my name.\nAI: Please enter your password.\nUSER: It's 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I choose loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I choose loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please let me check my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: Use 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, please.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, please.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to look at my portfolio.\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234, that's my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan is my choice.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan is my choice.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my portfolio?\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Keying in 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I pick loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I pick loan again.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to review my portfolio.\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, for sure.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, for sure.\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"loan\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, loan)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to check my portfolio\nAI: Please enter your user name.\nUSER: Max\nAI: Please enter your password.\nUSER: 1234\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: loan\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: loan\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I'd like to view my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I said loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I said loan.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can I see my portfolio, please?\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234 is my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan again.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Show me my portfolio.\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Entering 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Still choosing loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Still choosing loan.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: May I access my portfolio?\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: The password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: My selection is loan.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: My selection is loan.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I need to check my portfolio.\nAI: Please enter your user name.\nUSER: The name's Max.\nAI: Please enter your password.\nUSER: 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, once more.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, once more.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Could you display my portfolio?\nAI: Please enter your user name.\nUSER: Max is my name.\nAI: Please enter your password.\nUSER: It's 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I choose loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I choose loan again.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Please let me check my portfolio.\nAI: Please enter your user name.\nUSER: Max here.\nAI: Please enter your password.\nUSER: Use 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, please.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, please.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to look at my portfolio.\nAI: Please enter your user name.\nUSER: It's Max.\nAI: Please enter your password.\nUSER: 1234, that's my password.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan is my choice.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan is my choice.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: Can you pull up my portfolio?\nAI: Please enter your user name.\nUSER: I'm Max.\nAI: Please enter your password.\nUSER: Keying in 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: I pick loan again.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: I pick loan again.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \nlist_contacts: show your contact list\n    \ntransaction_search: lists the last transactions of the user account\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I wish to review my portfolio.\nAI: Please enter your user name.\nUSER: Call me Max.\nAI: Please enter your password.\nUSER: My password is 1234.\nAI: You have successfully logged in.\nAI: Please select your portfolio type.\nUSER: Loan, for sure.\nAI: I'm sorry, but the option you selected - `loan` - is not valid. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: Loan, for sure.\nAI: I'm sorry, but \"loan\" is not a valid option. Please choose from the available options.\nAI: Please select your portfolio type.\nUSER: bonds\n\n===\n\nYou are currently in the flow \"check_portfolio\".\nYou have just asked the user for the slot \"portfolio_type\" (The type of portfolio, for example: stocks, bonds or mutual_funds.).\n\n\nHere are the slots of the currently active flow:\n- name: user_name, value: Max, type: text, description: The user name of the user.\n- name: user_password, value: 1234, type: text, description: The password of the user.\n- name: portfolio_type, value: undefined, type: categorical, description: The type of portfolio, for example: stocks, bonds or mutual_funds., allowed values: ['stocks', 'bonds', 'mutual_funds']\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"bonds\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(portfolio_type, bonds)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What's a contact handle?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you explain what a contact handle is?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Could you clarify what a contact handle is?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is meant by a contact handle?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle supposed to be?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What does a contact handle refer to?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you tell me what a contact handle is?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is the definition of a contact handle?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle in this context?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"What's a contact handle?\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SearchAndReply()"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What's a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah okay she sent it to me, it's @KatePurry\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Oh, she just sent it to me, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you explain what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she provided it to me, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Could you clarify what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she gave it to me, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is meant by a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she sent me her handle, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle supposed to be?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she forwarded it to me, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What does a contact handle refer to?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: I see, she sent her handle, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you tell me what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she shared it with me, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is the definition of a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she just shared it, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle in this context?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she sent her contact handle, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she sent me the handle, it's @KatePurry.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_handle\" (a user handle starting with @).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: undefined, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Ah okay she sent it to me, it's @KatePurry\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_handle, @KatePurry)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What's a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah okay she sent it to me, it's @KatePurry\nAI: What's the name of the user you want to add?\nUSER: Kate\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Oh, she just sent it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: Her name is Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you explain what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she provided it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The name is Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Could you clarify what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she gave it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: It's Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is meant by a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she sent me her handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: She goes by Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle supposed to be?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she forwarded it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: Her name's Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What does a contact handle refer to?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: I see, she sent her handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The user is Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you tell me what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she shared it with me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: It's for Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is the definition of a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she just shared it, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The person is Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle in this context?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she sent her contact handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: She's called Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she sent me the handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The name of the user is Kate.\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_name\" (a name of a person).\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: undefined, type: text, description: a name of a person\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"Kate\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_name, Kate)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What's a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah okay she sent it to me, it's @KatePurry\nAI: What's the name of the user you want to add?\nUSER: Kate\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Oh, she just sent it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: Her name is Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you explain what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she provided it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The name is Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Could you clarify what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she gave it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: It's Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is meant by a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she sent me her handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: She goes by Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle supposed to be?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she forwarded it to me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: Her name's Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What does a contact handle refer to?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: I see, she sent her handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The user is Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: Can you tell me what a contact handle is?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Okay, she shared it with me, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: It's for Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is the definition of a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Ah, she just shared it, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The person is Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What is a contact handle in this context?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Alright, she sent her contact handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: She's called Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
{"messages": [{"role": "user", "content": "Your task is to analyze the current conversation context and generate a list of actions to start new business processes that we call flows, to extract slots, or respond to small talk and knowledge requests.\n\nThese are the flows that can be started, with their description and slots:\n\ntransfer_money: send money to friends and family\n    slot: transfer_money_recipient (the name of a person)\n    slot: transfer_money_amount_of_money (the amount of money without any currency designation)\n    \nadd_contact: add a contact to your contact list\n    slot: add_contact_handle (a user handle starting with @)\n    slot: add_contact_name (a name of a person)\n    slot: add_contact_confirmation, allowed values: [True, False]\n    \nlist_contacts: show your contact list\n    \nadd_card: add a card to your account\n    \ncheck_balance: check the user's account balance\n    \njob_vacancies: user asks for job vacancies\n    slot: department\n    \ntransaction_search: lists the last transactions of the user account\n    \ncorrect_address: user wants to correct the delivery address\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \ncorrect_order: user wants to correct order details\n    slot: correct_order, allowed values: [True, False]\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \nfill_pizza_order: user is asked to fill out pizza order details\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    \norder_pizza: user asks for a pizza\n    slot: pizza\n    slot: num_pizza\n    slot: address\n    slot: payment_option, allowed values: ['card', 'membership_points']\n    slot: card_details\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    \nsetup_recurrent_payment: set up a recurring payment, which can either be a direct debit or a standing order\n    slot: recurrent_payment_type (the type of payment), allowed values: ['direct debit', 'standing order']\n    slot: recurrent_payment_recipient (the name of a person)\n    slot: recurrent_payment_amount_of_money (the amount of money without any currency designation)\n    slot: recurrent_payment_frequency (the frequency of the payment), allowed values: ['monthly', 'yearly']\n    slot: recurrent_payment_start_date (the start date of the payment)\n    slot: recurrent_payment_end_date (the end date of the payment)\n    \nremove_contact: remove a contact from your contact list\n    slot: remove_contact_handle (a contact handle starting with @)\n    \nreplace_card: the user needs to replace their card\n    slot: replacement_reason, allowed values: ['lost', 'damaged']\n    \nverify_account: Verify an account for higher transfer limits\n    slot: based_in_california, allowed values: [True, False]\n    \ncheck_portfolio: Check the user's investment portfolio, including stocks, bonds, and mutual funds.\n    slot: user_name (The user name of the user.)\n    slot: user_password (The password of the user.)\n    slot: portfolio_type (The type of portfolio, for example: stocks, bonds or mutual_funds.), allowed values: ['stocks', 'bonds', 'mutual_funds']\n    \n\n===\nHere is what happened previously in the conversation:\nUSER: I want to add Kate to my contacts\nAI: What's the handle of the user you want to add?\nUSER: What exactly is a contact handle?\nAI: A contact handle in FinX is a unique identifier for users on the platform that starts with an @ symbol. It helps distinguish users and facilitates communication within the app.\nAI: What's the handle of the user you want to add?\nUSER: Got it, she sent me the handle, it's @KatePurry.\nAI: What's the name of the user you want to add?\nUSER: The name of the user is Kate.\nAI: Do you want to add Kate(@KatePurry) to your contacts?\nUSER: yes\n\n===\n\nYou are currently in the flow \"add_contact\".\nYou have just asked the user for the slot \"add_contact_confirmation\".\n\n\nHere are the slots of the currently active flow:\n- name: add_contact_handle, value: @KatePurry, type: text, description: a user handle starting with @\n- name: add_contact_name, value: Kate, type: text, description: a name of a person\n- name: add_contact_confirmation, value: undefined, type: bool, description: None, allowed values: [True, False]\n\n\n\nIf you start a flow, first start the flow and then optionally fill that flow's slots with information the user provided in their message.\n\nThe user just said \"\"\"yes\"\"\".\n\n===\nBased on this information generate a list of actions you want to take. Your job is to start flows and to fill slots where appropriate. Any logic of what happens afterwards is handled by the flow engine. These are your available actions:\n* Slot setting, described by \"SetSlot(slot_name, slot_value)\". An example would be \"SetSlot(recipient, Freddy)\"\n* Starting another flow, described by \"StartFlow(flow_name)\". An example would be \"StartFlow(transfer_money)\"\n* Cancelling the current flow, described by \"CancelFlow()\"\n* Clarifying which flow should be started. An example would be Clarify(list_contacts, add_contact, remove_contact) if the user just wrote \"contacts\" and there are multiple potential candidates. It also works with a single flow name to confirm you understood correctly, as in Clarify(transfer_money).\n* Intercepting and handle user messages with the intent to bypass the current step in the flow, described by \"SkipQuestion()\". Examples of user skip phrases are: \"Go to the next question\", \"Ask me something else\".\n* Responding to knowledge-oriented user messages, described by \"SearchAndReply()\"\n* Responding to a casual, non-task-oriented user message, described by \"ChitChat()\".\n* Handing off to a human, in case the user seems frustrated or explicitly asks to speak to one, described by \"HumanHandoff()\".\n\n===\nWrite out the actions you want to take, one per line, in the order they should take place.\nDo not fill slots with abstract values or placeholders.\nOnly use information provided by the user.\nOnly start a flow if it's completely clear what the user wants. Imagine you were a person reading this message. If it's not 100% clear, clarify the next step.\nDon't be overly confident. Take a conservative approach and clarify before proceeding.\nIf the user asks for two things which seem contradictory, clarify before starting a flow.\nIf it's not clear whether the user wants to skip the step or to cancel the flow, cancel the flow.\nStrictly adhere to the provided action types listed above.\nFocus on the last message and take it one step at a time.\nUse the previous conversation steps only to aid understanding.\n\nYour action list:"}, {"role": "assistant", "content": "SetSlot(add_contact_confirmation, True)"}]}
